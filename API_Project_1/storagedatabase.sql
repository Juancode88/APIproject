CREATE DATABASE SYSTEMMARKET; /*Create and starts the data base*/
/*Commentaries for terminal print*/
SELECT 'Hello, User this is the storage management system' AS Message; 
SELECT 'This the products table in the storage' AS MESSAGE_1;
/*Create the product table and elements on table*/
CREATE TABLE STORAGESHOP(
PRODUCT_ID_NATIONAL INT PRIMARY KEY AUTO_INCREMENT,
PRODUCT_NAME VARCHAR(100),
BRAND_REFERENT VARCHAR(100),
PRODUCT_AMOUNT_UNIT INT,
WEIGHT FLOAT,
BUY_PRICE FLOAT,
SOLD_PRICE FLOAT,
TAX FLOAT,
LOAD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/*Insert and input the data for product table*/
SELECT 'You enter the product data for the table products' AS MESSAGE_2;
INSERT INTO STORAGESHOP(PRODUCT_ID_NATIONAL,PRODUCT_NAME ,BRAND_REFERENT,
PRODUCT_AMOUNT_UNIT,WEIGHT,BUY_PRICE ,SOLD_PRICE,TAX ) VALUES ('Jasmine Rice', 'Thai Hom Mali', 1, 5.0, 25.99, 34.99, 0.08),
  ('Basmati Rice', 'Tilda', 10, 22.00, 12.99, 17.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('White Rice', 'Uncle Ben', 12, 30.00, 49.99, 64.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Brown Rice', 'Kokuho Rose', 14, 44.90, 4.99, 6.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Sushi Rice', 'Nishiki', 16, 40.5, 2.99, 5.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Arborio Rice', 'Risotto', 12, 41.0, 6.99, 9.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Wehani Rice', 'India Gate', 13, 52.0, 6.99, 19.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Doongara Rice', 'SunRice', 14, 45.0, 9.999, 12.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Koshihikari Rice', 'Japanese Rice', 16, 60.90, 7.99, 10.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Glutinous Rice', 'Thai Sticky Rice', 18, 40.00, 2.99, 4.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Long Grain Rice', 'Mahatma', 19, 92.00, 2.99, 12.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Medium Grain Rice', 'Calrose', 23, 50.0, 10.99, 13.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Short Grain Rice', 'Japanese Mochigome', 24, 25.00, 29.99, 39.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Organic Brown Rice', 'EcoPura', 17, 30.0, 5.99, 7.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Jasmine Fragrant Rice', 'Hom Mali', 16, 32.00, 14.99, 19.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Basmati Aroma Rice', 'Tilda', 19, 50.00, 7.99, 10.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('White Rice', 'Uncle Ben', 13, 45.00, 29.99, 39.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Saffron Rice', 'Indian Saffron', 11, 48.00,4.99, 6.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Wild Rice', 'Lake Wild Rice', 10, 51.00, 9.99, 12.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Black Rice', 'Forbidden Rice', 14, 50.00, 3.99, 5.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Red Rice', 'Camargue Red Rice', 15, 61.00, 6.99, 9.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00'),
  ('Jasmine Green Rice', 'Thai Green Rice', 9, 2.0, 12.99, 17.99, 0.08, '2022-01-01 10:00:00', '2022-01-01 10:00:00');
  /*request for generation of all in general table*/
SELECT*FROM STORAGESHOP;
/*making the operative for total tax in all table*/
SELECT COUNT(TAX) AS TOTAL_TAX FROM STORAGESHOP;
/*Apply a search for count and organize teams according the brnad's prices and its referent*/
SELECT BRAND_REFERENT, COUNT(*) AS COUNT
FROM (
  SELECT WEIGHT, BUY_PRICE,
         CASE 
             WHEN BUY_PRICE < 8.00 THEN 'TEAM_CHEAP'
             WHEN BUY_PRICE < 8.00 AND WEIGHT < 40.00 THEN 'TEAM_GENERIC'
             ELSE 'TEAM_PREMIUM'
         END AS TEAM_CAT_SCALE
  FROM STORAGESHOP
ORDER BY BUY_PRICE ASC
) AS SUBQUERY                          
GROUP BY BRAND_REFERENT;
/*Organize teams according to the condictions in the product amount unit*/
SELECT CASE WHEN PRODUCT_AMOUNT_UNIT > 12 THEN 'TEAM_LESS' ELSE 'TEAM_GREATE'END AS 'TEAM_CATEGORIE_UNTI'FROM STORAGESHOP;
SELECT 'it can be necessary update the date, you
should call the process CHANGEDATA' AS MESSAGE_3;
/*Create the process for update information on product table*/
DELIMITER &&
CREATE PROCEDURE CHANGEDATAPRODUCT(
  IN PRODUCT_NAME VARCHAR(100),
  IN BRAND_REFERENT VARCHAR(100),
  IN PRODUCT_AMOUNT_UNIT INT,
  IN WEIGHT FLOAT,
  IN BUY_PRICE FLOAT,
  IN SOLD_PRICE FLOAT,
  IN TAX FLOAT
)
BEGIN
  UPDATE STORAGESHOP 
  SET PRODUCT_NAME = PRODUCT_NAME, 
      BRAND_REFERENT = BRAND_REFERENT, 
      PRODUCT_AMOUNT_UNIT = PRODUCT_AMOUNT_UNIT, 
      WEIGHT = WEIGHT, 
      BUY_PRICE = BUY_PRICE, 
      SOLD_PRICE = SOLD_PRICE, 
      TAX = TAX 
  WHERE PRODUCT_NAME = PRODUCT_NAME;
  SELECT 'changed product data successfully!' AS MESSAGE_4;
END;
/*Create the process for inseet to new prodcut on product table*/
DELIMITER &&
CREATE PROCEDURE INSERT_NEW_PRODUCT(
  IN PRODUCT_NAME VARCHAR(100),
  IN BRAND_REFERENT VARCHAR(100),
  IN PRODUCT_AMOUNT_UNIT INT,
  IN WEIGHT FLOAT,
  IN BUY_PRICE FLOAT,
  IN SOLD_PRICE FLOAT,
  IN TAX FLOAT
)
BEGIN
  INSERT INTO STORAGESHOP(PRODUCT_NAME, BRAND_REFERENT, PRODUCT_AMOUNT_UNIT, WEIGHT, BUY_PRICE, SOLD_PRICE, TAX)
  VALUES (PRODUCT_NAME, BRAND_REFERENT, PRODUCT_AMOUNT_UNIT, WEIGHT, BUY_PRICE, SOLD_PRICE, TAX);
  SELECT 'added new product successfully!' AS MESSAGE_5;
END;
/*Create the process for delete products according to the ID on product table*/
CREATE PROCEDURE REMOVE_PRODUCT(
IN PRODUCT_ID_NATIONAL INT 
)
BEGIN 
	DELETE FROM STORAGESHOP
    WHERE PRODUCT_ID_NATIONAL
END;
/*Create the distributors table*/
SELECT 'This the Distributors data table of business' AS MESSAGE_6;
CREATE TABLE DISTRIBUTORS (
DISTRIBUTOR_ID INT PRIMARY KEY,
DISTRIBUTOR_NAME VARCHAR(100),
BRAND_REFERENT VARCHAR(100),
PRODUCT_AMOUNT_UNIT_SALE INT,
WEIGHT_SALE FLOAT,
SOLD_PRICE FLOAT,
COST_TRANSPORT FLOAT,
TAX_OPERATIVE FLOAT,
LOAD_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (BRAND_REFERENT) REFERENCES STORAGESHOP (BRAND_REFERENT)
);   
/*insert the information on distributors table*/ 
SELECT 'You enter the distributors data of business' AS MESSAGE_7; 
INSERT INTO DISTRIBUTORS (DISTRIBUTOR_ID,DISTRIBUTOR_NAME, BRAND_REFERENT, PRODUCT_AMOUNT_UNIT_SALE, WEIGHT_SALE, SOLD_PRICE, COST_TRANSPORT, TAX_OPERATIVE)
VALUES
  (1001,'Emily Wilson', 'Thai Hom Mali', 12, 12.0, 40.99, 5.00, 0.05, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (2202,'Ethan Patel', 'Tilda', 15, 30.0, 25.99, 3.00, 0.03, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (3033,'Ava Moreno', 'Uncle Ben', 23, 23.0, 60.99, 4.00, 0.04, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (1001,'Emily Wilson', 'Kokuho Rose', 14, 14.0, 8.99, 2.50, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (2202,'Ethan Patel', 'Nishiki', 16, 32.0, 7.99, 3.50, 0.03, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (3033,'Ava Moreno', 'Risotto', 13, 13.0, 11.99, 2.00, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (4111,'Oliver Lee', 'India Gate', 25, 50.0, 22.99, 3.50, 0.03, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (1001,'Emily Wilson', 'SunRice', 10, 10.0, 14.99, 2.50, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (2202,'Ethan Patel', 'Japanese Rice', 16, 32.0, 12.99, 3.50, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (3033,'Ava Moreno', 'Thai Sticky Rice', 13, 13.0, 6.99, 2.00, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (4111,'Oliver Lee', 'Mahatma', 6, 18.0, 15.99, 3.50, 0.03, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (1001,'Emily Wilson', 'Calrose', 24, 48.0, 16.99, 2.50, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (2202,'Ethan Patel', 'Japanese Mochigome', 16, 25.0, 40.99, 4.00, 0.04, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (3033,'Ava Moreno', 'EcoPura', 11, 22.0, 9.99, 2.00, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (4111,'Oliver Lee', 'Hom Mali', 15, 20.0, 20.99, 3.50, 0.03, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (1001,'Emily Wilson', 'Tilda', 14, 28.0, 12.99, 2.50, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (2202,'Ethan Patel', 'Uncle Ben', 16, 32.0, 30.99, 4.00, 0.04, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (3033,'Ava Moreno', 'Indian Saffron', 7, 14.0, 7.99, 2.00, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (4111,'Oliver Lee', 'Lake Wild Rice', 15, 30.0, 14.99, 3.50, 0.03, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (1001,'Emily Wilson', 'Forbidden Rice', 14, 14.0, 8.99, 2.50, 0.02, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (2202,'Ethan Patel', 'Thai Hom Mali', 8, 16.0, 40.99, 4.00, 0.04, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (3033,'Ava Moreno', 'Tilda', 13, 12.0, 25.99, 3.00, 0.03, '2022-01-02 10:00:00', '2022-01-03 10:00:00'),
  (4111,'Oliver Lee', 'Uncle Ben', 9, 20.0, 60.99, 4.00, 0.04, '2022-01-02 10:00:00', '2022-01-03 10:00:00');
	/*request for generation of all in general table*/
  SELECT 'This the distributor table of business' AS MESSAGE_8;
  SELECT*FROM DISTRIBUTORS;
  /*making the operative for total operative tax in all table*/
  SELECT COUNT(TAX_OPERATIVE) AS TOTAL_OPERATIVE_TAX FROM DISTRIBUTORS;
  /*Apply a search for count and organize teams according the brnad's prices and its referent*/
  SELECT DISTRIBUTOR_NAME, COUNT(*) AS COUNT
  FROM (
  SELECT WEIGHT_SALE, SOLD_PRICE,
         CASE 
             WHEN SOLD_PRICE < 19.00 THEN 'TEAM_CHEAP'
             WHEN SOLD_PRICE < 19.00 AND WEIGHT_SALE < 28.0 THEN 'TEAM_GENERIC'
             ELSE 'TEAM_PREMIUM'
         END AS TEAM_CAT_DISTRIBUTOR
  FROM DISTRIBUTORS
ORDER BY SOLD_PRICE ASC
) AS SUBQUERY                           
GROUP BY DISTRIBUTOR_NAME;
/*Organize teams according to the condictions for weight sold per distributor*/
SELECT CASE WHEN PRODUCT_AMOUNT_UNIT_SALE > 12 THEN 'TEAM_LESS' ELSE 'TEAM_GREATE'END AS 'TEAM_CATEGORIE_UNTI'FROM DISTRIBUTORS ORDER BY DISTRIBUTOR_NAME;
/* Create the process for update information in distributors table*/
DELIMITER &&  
CREATE PROCEDURE CHANGEDATADISTRIBUTOR(
IN PRODUCT_NAME VARCHAR(100),
IN BRAND_REFERENT VARCHAR(100),
IN PRODUCT_AMOUNT_UNIT_SALE INT,
IN WEIGHT_SALE FLOAT,
IN SOLD_PRICE FLOAT,
IN COST_TRANSPORT FLOAT,
IN TAX_OPERATIVE FLOAT
)
BEGIN
  UPDATE DISTRIBUTORS
  SET PRODUCT_NAME = PRODUCT_NAME,
	  BRAND_REFERENT = BRAND_REFERENT,
	  PRODUCT_AMOUNT_UNIT_SALE = PRODUCT_AMOUNT_UNIT_SALE,
      WEIGHT_SALE = WEIGHT_SALE,
      SOLD_PRICE = SOLD_PRICE,
      COST_TRANSPORT = COST_TRANSPORT,
      TAX_OPERATIVE = TAX_OPERATIVE
  WHERE PRODUCT_NAME;
  SELECT 'change product data successfully!' AS MESSAGE_9;
  END; 
  /*Creat the process for new distributor insert on distributor table*/
CREATE PROCEDURE INSERT_NEW_DISTRIBUTOR(
  IN DISTRIBUTOR_NAME VARCHAR(100),
  IN BRAND_REFERENT VARCHAR(100),
  IN PRODUCT_AMOUNT_UNIT_SALE INT,
  IN WEIGHT_SALE FLOAT,
  IN SOLD_PRICE FLOAT,
  IN COST_TRANSPORT FLOAT,
  IN TAX_OPERATIVE FLOAT
)             
BEGIN
  INSERT INTO DISTRIBUTORS (DISTRIBUTOR_NAME, BRAND_REFERENT, PRODUCT_AMOUNT_UNIT_SALE, WEIGHT_SALE, SOLD_PRICE, 
    COST_TRANSPORT, TAX_OPERATIVE)
    VALUES (DISTRIBUTOR_NAME, BRAND_REFERENT, PRODUCT_AMOUNT_UNIT_SALE, WEIGHT_SALE, SOLD_PRICE, COST_TRANSPORT, 
    TAX_OPERATIVE);
  SELECT 'Added new distributor successfully!' AS MESSAGE_10;
END;    
/*Create the process for delete distributor according to the ID on distributors table*/
CREATE PROCEDURE REMOVE_DISTRIBUTOR(
IN DISTRIBUTOR_ID INT 
)
BEGIN 
	DELETE FROM DISTRIBUTORS
    WHERE DISTRIBUTOR_ID  
END;
/*Possible views apply in the product table*/
CREATE VIEW VW_PRICES AS
SELECT PRODUCT_ID_NATIONAL,PRODUCT_NAME,BRAND_REFERENT,WEIGHT,BUY_PRICE,SOLD_PRICE 
FROM STORAGESHOP;
CREATE VIEW VW_STORAGE AS
SELECT PRODUCT_ID_NATIONAL,PRODUCT_NAME,BRAND_REFERENT,WEIGHT,PRODUCT_AMOUNT_UNIT
FROM STORAGESHOP;
CREATE VIEW VW_ORDER AS
SELECT PRODUCT_ID_NATIONAL,PRODUCT_NAME,BRAND_REFERENT,PRODUCT_AMOUNT_UNIT,WEIGHT,BUY_PRICE
FROM STORAGESHOP;
CREATE VIEW VW_ORDER_SERVICE AS
SELECT PRODUCT_ID_NATIONAL,PRODUCT_NAME,BRAND_REFERENT,SOLD_PRICE,TAX
FROM STORAGESHOP;
/*Possible views apply in the distributor table*/
CREATE VIEW VW_DISTRIBUTOR AS
SELECT DISTRIBUTOR_ID,DISTRIBUTOR_NAME,BRAND_REFERENT,PRODUCT_AMOUNT_UNIT_SALE,SOLD_PRICE
FROM DISTRIBUTORS;
CREATE VIEW VW_DISTRIBUTOR_PRODUCT AS
SELECT  DISTRIBUTOR_ID,DISTRIBUTOR_NAME,BRAND_REFERENT,PRODUCT_AMOUNT_UNIT_SALE,WEIGHT_SALE
FROM DISTRIBUTORS;
CREATE VIEW VW_SERVICE_DISTRIBUTOR AS
SELECT DISTRIBUTOR_ID,DISTRIBUTOR,SOLD_PRICE, COST_TRANSPORT, 
    TAX_OPERATIVE FROM DISTRIBUTORS;          
 
  
